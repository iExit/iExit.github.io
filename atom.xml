<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>iExit</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://iExit.github.io/"/>
  <updated>2018-12-26T01:26:44.650Z</updated>
  <id>http://iExit.github.io/</id>
  
  <author>
    <name>Shen Hao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue轮播图插件：vue-awesome-swiper</title>
    <link href="http://iExit.github.io/2018/12/26/vue%E8%BD%AE%E6%92%AD%E5%9B%BE%E6%8F%92%E4%BB%B6%EF%BC%9Avue-awesome-swiper/"/>
    <id>http://iExit.github.io/2018/12/26/vue轮播图插件：vue-awesome-swiper/</id>
    <published>2018-12-26T01:17:39.000Z</published>
    <updated>2018-12-26T01:26:44.650Z</updated>
    
    <content type="html"><![CDATA[<p>先用<code>vue-cli</code>新建一个项目<br><figure class="highlight plain"><figcaption><span>install vue-awesome-swiper --save(-S)```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">等待安装，安装完后`package.json`中添加上了`vue-awesome-swiper`</span><br><span class="line">```js</span><br><span class="line">&quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;vue&quot;: &quot;^2.5.2&quot;,</span><br><span class="line">    &quot;vue-awesome-swiper&quot;: &quot;^3.1.3&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>进入<code>main.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> vueSwiper <span class="keyword">from</span> <span class="string">'vue-awesome-swiper'</span>  <span class="comment">//引入vue-awesome-swiper</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'swiper/dist/css/swiper.css'</span>  <span class="comment">//引入样式</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Vue.use(vueSwiper)  <span class="comment">//使用插件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><code>swiper</code>的基本结构<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;swiper&gt;</span><br><span class="line">       &lt;swiper-slide <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-slide"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">swiper-slide</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span></span><br></pre></td></tr></table></figure></p><p>参考<code>swiper</code>的基本结构，在<code>App.vue</code>中尝试一下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;swiper&gt;</span><br><span class="line">        &lt;swiper-slide <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-slide"</span> v-<span class="keyword">for</span>=<span class="string">"(item,index) in slide"</span> :key=<span class="string">"index"</span>&gt;</span><br><span class="line">          我是第&#123;&#123;item&#125;&#125;个轮播图</span><br><span class="line">        &lt;<span class="regexp">/swiper-slide&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>swiper&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  name: 'App',</span></span><br><span class="line"><span class="regexp">  data() &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">      slide: [1, 2, 3, 4, 5]</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.swiper-slide &#123;</span><br><span class="line">  width: <span class="number">100</span>%;</span><br><span class="line">  height: <span class="number">500</span>px;</span><br><span class="line">  line-height:<span class="number">500</span>px;</span><br><span class="line">  font-size: <span class="number">50</span>px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  background-color: rosybrown;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/12953503-0df77e242efd5b8a.png?imageMogr2/auto-orient/" alt=""><br><img src="https://upload-images.jianshu.io/upload_images/12953503-7baa7e8ff75fe53e.png?imageMogr2/auto-orient/" alt=""><br>成功实现了轮播图的效果，接下来配置一些属性，在App.vue中进行更改<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;swiper :options=<span class="string">"swiperOption"</span>&gt;</span><br><span class="line">        &lt;swiper-slide <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-slide"</span> v-<span class="keyword">for</span>=<span class="string">"(item,index) in slide"</span> :key=<span class="string">"index"</span>&gt;</span><br><span class="line">          我是第&#123;&#123;item&#125;&#125;个轮播图</span><br><span class="line">        &lt;<span class="regexp">/swiper-slide&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="swiper-pagination"  slot="pagination"&gt;&lt;/</span>div&gt;   <span class="xml"><span class="comment">&lt;!-- 分页 --&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-button-prev"</span> <span class="attr">slot</span>=<span class="string">"button-prev"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="comment">&lt;!-- 箭头左 --&gt;</span> </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"swiper-button-next"</span> <span class="attr">slot</span>=<span class="string">"button-next"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="comment">&lt;!-- 箭头右 --&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">swiper</span>&gt;</span></span></span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">export default &#123;</span></span><br><span class="line"><span class="regexp">  name: 'App',</span></span><br><span class="line"><span class="regexp">  data() &#123;</span></span><br><span class="line"><span class="regexp">    return &#123;</span></span><br><span class="line"><span class="regexp">      slide: [1, 2, 3, 4, 5],</span></span><br><span class="line"><span class="regexp">      /</span><span class="regexp">/设置属性</span></span><br><span class="line"><span class="regexp">      swiperOption: &#123;</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/显示分页</span></span><br><span class="line"><span class="regexp">        pagination: &#123;</span></span><br><span class="line"><span class="regexp">          el: '.swiper-pagination',</span></span><br><span class="line"><span class="regexp">          clickable: true /</span><span class="regexp">/允许分页点击跳转</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/设置点击箭头</span></span><br><span class="line"><span class="regexp">        navigation: &#123;</span></span><br><span class="line"><span class="regexp">          nextEl: '.swiper-button-next', </span></span><br><span class="line"><span class="regexp">          prevEl: '.swiper-button-prev'</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/自动轮播</span></span><br><span class="line"><span class="regexp">        autoplay: &#123;</span></span><br><span class="line"><span class="regexp">          delay: 400</span></span><br><span class="line"><span class="regexp">        &#125;,</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/开启循环模式</span></span><br><span class="line"><span class="regexp">        loop: true,</span></span><br><span class="line"><span class="regexp">        /</span><span class="regexp">/开启鼠标滚轮控制Swiper切换</span></span><br><span class="line"><span class="regexp">        mousewheel: true</span></span><br><span class="line"><span class="regexp">      &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">.swiper-slide &#123;</span><br><span class="line">  width: <span class="number">100</span>%;</span><br><span class="line">  height: <span class="number">500</span>px;</span><br><span class="line">  line-height: <span class="number">500</span>px;</span><br><span class="line">  font-size: <span class="number">50</span>px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  background-color: rosybrown;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样就实现了轮播图更多属性的配置</p><p>这样就实现了轮播图更多属性的配置</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;先用&lt;code&gt;vue-cli&lt;/code&gt;新建一个项目&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;figcaption&gt;&lt;span&gt;install vue-awesome-swiper --save(-S)```&lt;/span&gt;&lt;/figcap
      
    
    </summary>
    
    
      <category term="vue" scheme="http://iExit.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>canvas</title>
    <link href="http://iExit.github.io/2018/12/25/canvas/"/>
    <id>http://iExit.github.io/2018/12/25/canvas/</id>
    <published>2018-12-25T08:19:25.000Z</published>
    <updated>2018-12-26T02:35:03.803Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>canvas 最早由Apple引入WebKit,用于Mac OS X 的 Dashboard,后来又在Safari和Google Chrome被实现。<br>基于 Gecko 1.8的浏览器,比如 Firefox 1.5, 同样支持这个元素。<br>&lt;canvas&gt; 元素是WhatWG Web applications 1.0规范的一部分,也包含于HTML 5中。  </p></blockquote><h2 id="体验Canvas"><a href="#体验Canvas" class="headerlink" title="体验Canvas"></a>体验Canvas</h2><h3 id="什么是Canvas？"><a href="#什么是Canvas？" class="headerlink" title="什么是Canvas？"></a>什么是Canvas？</h3><p>HTML5 的 canvas 元素使用 JavaScript 在网页上绘制图像。<br>画布是一个矩形区域，您可以控制其每一像素。<br>canvas 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。</p><h3 id="创建Canvas元素"><a href="#创建Canvas元素" class="headerlink" title="创建Canvas元素"></a>创建Canvas元素</h3><p>向 HTML5 页面添加 canvas 元素。<br>规定元素的 id、宽度和高度：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"myCanvas"</span> <span class="attr">width</span>=<span class="string">"200"</span> <span class="attr">height</span>=<span class="string">"100"</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="Canvas坐标系"><a href="#Canvas坐标系" class="headerlink" title="Canvas坐标系"></a>Canvas坐标系</h3><h3 id="通过JavaScript来绘制"><a href="#通过JavaScript来绘制" class="headerlink" title="通过JavaScript来绘制"></a>通过JavaScript来绘制</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*获取元素*/</span></span><br><span class="line"><span class="keyword">var</span> myCanvas = <span class="built_in">document</span>.querySelector(<span class="string">'#myCanvas'</span>);</span><br><span class="line"><span class="comment">/*获取绘图工具*/</span></span><br><span class="line"><span class="keyword">var</span> context = myCanvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line"><span class="comment">/*设置绘图的起始位置*/</span></span><br><span class="line">context.moveTo(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line"><span class="comment">/*绘制路径*/</span></span><br><span class="line">context.lineTo(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line"><span class="comment">/*描边*/</span></span><br><span class="line">context.stroke();</span><br></pre></td></tr></table></figure><h2 id="Canvas的基本使用"><a href="#Canvas的基本使用" class="headerlink" title="Canvas的基本使用"></a>Canvas的基本使用</h2><h3 id="图形绘制"><a href="#图形绘制" class="headerlink" title="图形绘制"></a>图形绘制</h3><p>需要理解些概念：  </p><ul><li>路径的概念</li><li>路径的绘制<ul><li>描边 stroke()  </li><li>填充 fill()  </li></ul></li><li>闭合路径<ul><li>手动闭合</li><li>程序闭合 closePath()</li></ul></li><li>填充规则(非零环绕)  </li><li>开启新的路径 beginPath()</li></ul><h3 id="设置样式"><a href="#设置样式" class="headerlink" title="设置样式"></a>设置样式</h3><ul><li>画笔的状态<ul><li>lineWidth 线宽，默认1px</li><li>lineCap 线末端类型：(butt默认)、round、square </li><li>lineJoin 相交线的拐点 miter(默认)、round、bevel</li><li>strokeStyle 线的颜色</li><li>fillStyle 填充颜色</li><li>setLineDash() 设置虚线</li><li>getLineDash() 获取虚线宽度集合</li><li>lineDashOffset 设置虚线偏移量（负值向右偏移）</li></ul></li></ul><h3 id="实例练习"><a href="#实例练习" class="headerlink" title="实例练习"></a>实例练习</h3><ul><li>渐变色绘制</li><li>镂空的房子</li><li>绘制坐标网格</li><li>绘制坐标系</li><li>绘制坐标点</li><li>绘制折线图</li></ul><h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ul><li><a href="http://www.w3school.com.cn/tags/html_ref_canvas.asp" target="_blank" rel="noopener">w3school</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Canvas_API/Tutorial" target="_blank" rel="noopener">Canvas_API</a></li></ul><h2 id="Canvas图形绘制"><a href="#Canvas图形绘制" class="headerlink" title="Canvas图形绘制"></a>Canvas图形绘制</h2><h3 id="矩形绘制"><a href="#矩形绘制" class="headerlink" title="矩形绘制"></a>矩形绘制</h3><ul><li>rect(x,y,w,h) 没有独立路径</li><li>strokeRect(x,y,w,h) 有独立路径，不影响别的绘制</li><li>fillRect(x,y,w,h) 有独立路径，不影响别的绘制</li><li>clearRect(x,y,w,h) 擦除矩形区域</li></ul><h3 id="圆弧绘制"><a href="#圆弧绘制" class="headerlink" title="圆弧绘制"></a>圆弧绘制</h3><ul><li>弧度概念</li><li>arc()<ul><li>x 圆心横坐标</li><li>y 圆心纵坐标</li><li>r 半径</li><li>startAngle 开始角度</li><li>endAngle 结束角度</li><li>anticlockwise 是否逆时针方向绘制（默认false表示顺时针；true表示逆时针）</li></ul></li></ul><h3 id="绘制文本"><a href="#绘制文本" class="headerlink" title="绘制文本"></a>绘制文本</h3><ul><li>ctx.font = ‘微软雅黑’ 设置字体</li><li>strokeText()</li><li>fillText(text,x,y,maxWidth)<ul><li>text 要绘制的文本</li><li>x,y 文本绘制的坐标（文本左下角）</li><li>maxWidth 设置文本最大宽度，可选参数</li></ul></li><li>ctx.textAlign文本水平对齐方式，相对绘制坐标来说的<ul><li>left</li><li>center</li><li>right</li><li>start 默认</li><li>end</li></ul></li><li>ctx.direction属性css(rtl ltr) start和end于此相关<ul><li>如果是ltr,start和left表现一致</li><li>如果是rtl,start和right表现一致</li></ul></li><li>ctx.textBaseline 设置基线（垂直对齐方式  ）<ul><li>top 文本的基线处于文本的正上方，并且有一段距离</li><li>middle 文本的基线处于文本的正中间</li><li>bottom 文本的基线处于文本的证下方，并且有一段距离</li><li>hanging 文本的基线处于文本的正上方，并且和文本粘合</li><li>alphabetic 默认值，基线处于文本的下方，并且穿过文字</li><li>ideographic 和bottom相似，但是不一样</li></ul></li><li>measureText() 获取文本宽度obj.width</li></ul><h3 id="实例练习-1"><a href="#实例练习-1" class="headerlink" title="实例练习"></a>实例练习</h3><ul><li>绘制扇形</li><li>绘制圆角矩形</li><li>绘制圆</li><li>绘制饼图</li></ul><h2 id="做动画"><a href="#做动画" class="headerlink" title="做动画"></a>做动画</h2><h3 id="绘制图片"><a href="#绘制图片" class="headerlink" title="绘制图片"></a>绘制图片</h3><ul><li>drawImage()<ul><li>三个参数drawImage(img,x,y)<ul><li>img 图片对象、canvas对象、video对象</li><li>x,y 图片绘制的左上角</li></ul></li><li>五个参数drawImage(img,x,y,w,h)<ul><li>img 图片对象、canvas对象、video对象</li><li>x,y 图片绘制的左上角</li><li>w,h 图片绘制尺寸设置(图片缩放，不是截取)</li></ul></li><li>九个参数drawImage(img,x,y,w,h,x1,y1,w1,h1)<ul><li>img 图片对象、canvas对象、video对象</li><li>x,y,w,h 图片中的一个矩形区域</li><li>x1,y1,w1,h1 画布中的一个矩形区域</li></ul></li></ul></li></ul><h3 id="序列帧动画"><a href="#序列帧动画" class="headerlink" title="序列帧动画"></a>序列帧动画</h3><ul><li>绘制精灵图</li><li>动起来</li><li>控制边界</li><li>键盘控制</li></ul><h3 id="坐标变换"><a href="#坐标变换" class="headerlink" title="坐标变换"></a>坐标变换</h3><ul><li>平移 移动画布的原点<ul><li>translate(x,y) 参数表示移动目标点的坐标</li></ul></li><li>缩放<ul><li>scale(x,y) 参数表示宽高的缩放比例</li></ul></li><li>旋转<ul><li>rotate(angle) 参数表示旋转角度</li></ul></li></ul><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;canvas 最早由Apple引入WebKit,用于Mac OS X 的 Dashboard,后来又在Safari和Google Chrome被实现。&lt;br&gt;基于 Gecko 1.8的浏览器,比如 Firefox 1.5, 同样支持这个元素。&lt;br
      
    
    </summary>
    
    
      <category term="canvas" scheme="http://iExit.github.io/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>ES6(jspang)</title>
    <link href="http://iExit.github.io/2018/12/25/ES6-jspang/"/>
    <id>http://iExit.github.io/2018/12/25/ES6-jspang/</id>
    <published>2018-12-25T08:16:12.000Z</published>
    <updated>2018-12-25T08:45:03.468Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文来自于jspang大佬，跟着大佬的博客手撸了一遍。</p></blockquote><h2 id="let-和-const"><a href="#let-和-const" class="headerlink" title="let 和 const"></a>let 和 const</h2><h2 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h2><h3 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(c) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">'hello'</span>, <span class="attr">bar</span>: <span class="string">'world'</span> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(foo) <span class="comment">// hello</span></span><br><span class="line"><span class="built_in">console</span>.log(bar) <span class="comment">// world</span></span><br></pre></td></tr></table></figure><h3 id="字符串解构"><a href="#字符串解构" class="headerlink" title="字符串解构"></a>字符串解构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c, d, e] = <span class="string">'hello'</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// h</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// e</span></span><br><span class="line"><span class="built_in">console</span>.log(c) <span class="comment">// l</span></span><br><span class="line"><span class="built_in">console</span>.log(d) <span class="comment">// l</span></span><br><span class="line"><span class="built_in">console</span>.log(e) <span class="comment">// o</span></span><br></pre></td></tr></table></figure><h2 id="扩展运算符和-rest-运算符"><a href="#扩展运算符和-rest-运算符" class="headerlink" title="扩展运算符和 rest 运算符"></a>扩展运算符和 rest 运算符</h2><h3 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arg[<span class="number">0</span>])</span><br><span class="line">  <span class="built_in">console</span>.log(arg[<span class="number">1</span>])</span><br><span class="line">  <span class="built_in">console</span>.log(arg[<span class="number">2</span>])</span><br><span class="line">  <span class="built_in">console</span>.log(arg[<span class="number">3</span>])</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) <span class="comment">//1,2,3,undefined</span></span><br></pre></td></tr></table></figure><p>数组赋值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="string">'hello'</span>, <span class="string">'world'</span>]</span><br><span class="line"><span class="keyword">let</span> arr2 = [...arr1]</span><br><span class="line"><span class="comment">// arr2=arr1 不是真正的赋值，是对堆栈的引用</span></span><br></pre></td></tr></table></figure><h3 id="rest-运算符"><a href="#rest-运算符" class="headerlink" title="rest 运算符"></a>rest 运算符</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">first, ...arg</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> arg) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">fn(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>) <span class="comment">// 2,3,4</span></span><br></pre></td></tr></table></figure><h2 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> world=<span class="string">'world'</span></span><br><span class="line"><span class="keyword">let</span> blog=<span class="string">`hello<span class="subst">$&#123;world&#125;</span></span></span><br></pre></td></tr></table></figure><h3 id="对运算的支持"><a href="#对运算的支持" class="headerlink" title="对运算的支持"></a>对运算的支持</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> result = <span class="string">`<span class="subst">$&#123;a + b&#125;</span>`</span> <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="字符串查找"><a href="#字符串查找" class="headerlink" title="字符串查找"></a>字符串查找</h3><ul><li>查找是否存在</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">'world'</span></span><br><span class="line"><span class="keyword">let</span> blog = <span class="string">'hello world'</span></span><br><span class="line">blog.includes(text) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>判断开头是否存在</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">'hello'</span></span><br><span class="line"><span class="keyword">let</span> blog = <span class="string">'hello world'</span></span><br><span class="line">blog.startsWith(text) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>判断结尾是否存在</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">'world'</span></span><br><span class="line"><span class="keyword">let</span> blog = <span class="string">'hello world'</span></span><br><span class="line">blog.endsWith(text) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>复制字符串</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">'world'</span></span><br><span class="line">text.repeat(<span class="number">3</span>) <span class="comment">// worldworldworld</span></span><br></pre></td></tr></table></figure><h2 id="数字操作"><a href="#数字操作" class="headerlink" title="数字操作"></a>数字操作</h2><h3 id="整数取值范围操作"><a href="#整数取值范围操作" class="headerlink" title="整数取值范围操作"></a>整数取值范围操作</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">53</span>) - <span class="number">1</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// 9007199254740991</span></span><br></pre></td></tr></table></figure><ul><li>最大安全整数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MAX_SAFE_INTEGER) <span class="comment">// 9007199254740991</span></span><br></pre></td></tr></table></figure><ul><li>最小安全整数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Number</span>.MIN_SAFE_INTEGER) <span class="comment">// -9007199254740991</span></span><br></pre></td></tr></table></figure><h3 id="数字判断和转换"><a href="#数字判断和转换" class="headerlink" title="数字判断和转换"></a>数字判断和转换</h3><ul><li>数字验证</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isFinite(<span class="number">11</span> / <span class="number">4</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isFinite(<span class="string">'hello'</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>NaN 验证</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isNaN(<span class="literal">NaN</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>整数判断</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isInteger(<span class="number">12</span>) <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Number</span>.isInteger(<span class="number">1.2</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>安全整数判断</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>.isSafeInteger(<span class="built_in">Number</span>.MAX_SAFE_INTEGER) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="新增的数组知识"><a href="#新增的数组知识" class="headerlink" title="新增的数组知识"></a>新增的数组知识</h2><h3 id="JSON-数组格式转换"><a href="#JSON-数组格式转换" class="headerlink" title="JSON 数组格式转换"></a>JSON 数组格式转换</h3><blockquote><p>这就是一个标准的 JSON 数组格式，跟普通的 JSON 对比是在最后多了一个 length 属性。只要是这种特殊的 json 格式都可以轻松使用 ES6 的语法转变成数组。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> json = &#123;</span><br><span class="line">  <span class="string">'0'</span>: <span class="string">'前'</span>,</span><br><span class="line">  <span class="string">'1'</span>: <span class="string">'后'</span>,</span><br><span class="line">  <span class="string">'2'</span>: <span class="string">'全'</span>,</span><br><span class="line">  length: <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(json)</span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// ["前", "后", "全"]</span></span><br></pre></td></tr></table></figure><h3 id="Array-of-方法"><a href="#Array-of-方法" class="headerlink" title="Array.of()方法"></a>Array.of()方法</h3><blockquote><p>把一堆文本或者变量转换成数组</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.of(<span class="string">'前'</span>, <span class="string">'后'</span>, <span class="string">'全'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// ["前", "后", "全"]</span></span><br></pre></td></tr></table></figure><h3 id="find-实例方法"><a href="#find-实例方法" class="headerlink" title="find()实例方法"></a>find()实例方法</h3><blockquote><p>find 方法是从数组全查找。在 find 方法全我们需要传入一个匿名函数，函数需要传入三个参数：value：表示当前查找的值。index：表示当前查找的数组索引。arr：表示当前数组。在函数全如果找到符合条件的数组元素就进行 return，并停止查找。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.find(<span class="function">(<span class="params">value, index, arr</span>) =&gt;</span> value &gt; <span class="number">3</span>)) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h3 id="fill-实例方法"><a href="#fill-实例方法" class="headerlink" title="fill()实例方法"></a>fill()实例方法</h3><blockquote><p>fill()也是一个实例方法，它的作用是把数组进行填充，它接收三个参数，第一个参数是填充的变量，第二个是开始填充的位置，第三个是填充到的位置。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">arr.fill(<span class="string">'hello'</span>, <span class="number">2</span>, <span class="number">5</span>)</span><br><span class="line"><span class="built_in">console</span>.log(arr) <span class="comment">// [0, 1, "hello", "hello", "hello", 5, 6, 7, 8, 9]</span></span><br></pre></td></tr></table></figure><h3 id="数组遍历"><a href="#数组遍历" class="headerlink" title="数组遍历"></a>数组遍历</h3><ul><li>for…of 循环<blockquote><p>打印内容</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'前'</span>, <span class="string">'后'</span>, <span class="string">'全'</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> arr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>打印索引</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'前'</span>, <span class="string">'后'</span>, <span class="string">'全'</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> index <span class="keyword">of</span> arr.keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>打印内容+索引</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'前'</span>, <span class="string">'后'</span>, <span class="string">'全'</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, val] <span class="keyword">of</span> arr.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(index + <span class="string">':'</span> + val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>entries( )实例方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'前'</span>, <span class="string">'后'</span>, <span class="string">'全'</span>]</span><br><span class="line"><span class="keyword">let</span> list = arr.entries()</span><br><span class="line"><span class="built_in">console</span>.log(list.next().value) <span class="comment">// [0, "前"]</span></span><br><span class="line"><span class="built_in">console</span>.log(list.next().value) <span class="comment">// [1, "后"]</span></span><br><span class="line"><span class="built_in">console</span>.log(list.next().value) <span class="comment">// [2, "全"]</span></span><br></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><h2 id="数组和函数补漏"><a href="#数组和函数补漏" class="headerlink" title="数组和函数补漏"></a>数组和函数补漏</h2><h3 id="对象的函数解构"><a href="#对象的函数解构" class="headerlink" title="对象的函数解构"></a>对象的函数解构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> json = &#123;</span><br><span class="line">  a: <span class="string">'前'</span>,</span><br><span class="line">  b: <span class="string">'后'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">&#123; a, b &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a, b)</span><br><span class="line">&#125;</span><br><span class="line">fn(json) <span class="comment">// 前 后</span></span><br></pre></td></tr></table></figure><h3 id="数组的函数解构"><a href="#数组的函数解构" class="headerlink" title="数组的函数解构"></a>数组的函数解构</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'前'</span>, <span class="string">'后'</span>, <span class="string">'全'</span>]</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(a, b, c)</span><br><span class="line">&#125;</span><br><span class="line">fn(...arr) <span class="comment">// 前 后 全</span></span><br></pre></td></tr></table></figure><h3 id="in-的用法"><a href="#in-的用法" class="headerlink" title="in 的用法"></a>in 的用法</h3><blockquote><p>in 是用来判断对象或者数组全是否存在某个值的。</p></blockquote><ul><li>对象判断</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  a: <span class="string">'hello'</span>,</span><br><span class="line">  b: <span class="string">'world'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'a'</span> <span class="keyword">in</span> obj) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><ul><li>数组判断</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'hello'</span>, <span class="string">'world'</span>]</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span> <span class="keyword">in</span> arr) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h3 id="数组遍历-1"><a href="#数组遍历-1" class="headerlink" title="数组遍历"></a>数组遍历</h3><blockquote><p>forEach 循环的特点是会自动省略为空的数组元素，相当于直接给我们筛空了。当是有时候也会给我们帮倒忙。</p></blockquote><ul><li>forEach</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'前'</span>, <span class="string">'后'</span>, <span class="string">'全'</span>]</span><br><span class="line">arr.forEach(<span class="function">(<span class="params">val, index</span>) =&gt;</span> <span class="built_in">console</span>.log(index, val))</span><br></pre></td></tr></table></figure><ul><li>filter</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'前'</span>, <span class="string">'后'</span>, <span class="string">'全'</span>]</span><br><span class="line">arr.filter(<span class="function"><span class="params">val</span> =&gt;</span> <span class="built_in">console</span>.log(val))</span><br></pre></td></tr></table></figure><ul><li>some</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'前'</span>, <span class="string">'后'</span>, <span class="string">'全'</span>]</span><br><span class="line">arr.some(<span class="function"><span class="params">val</span> =&gt;</span> <span class="built_in">console</span>.log(val))</span><br></pre></td></tr></table></figure><ul><li>map<blockquote><p>map 可以向上面一样做循环，在这里起到一个替换的作用</p></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">'前'</span>, <span class="string">'后'</span>, <span class="string">'全'</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr.map(<span class="function"><span class="params">val</span> =&gt;</span> <span class="string">'中'</span>))</span><br></pre></td></tr></table></figure><h2 id="ES6-对象"><a href="#ES6-对象" class="headerlink" title="ES6 对象"></a>ES6 对象</h2><h2 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h2><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><blockquote><p>Set 和 Array 的区别是 Set 不允许内部有重复的值，如果有只显示一个，相当于去重。虽然 Set 很像数组，但是他不是数组。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> setArr = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="built_in">console</span>.log(setArr) <span class="comment">// Set(4) &#123;1, 2, 3, 4&#125;</span></span><br></pre></td></tr></table></figure><p>size 属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> setArr = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="built_in">console</span>.log(setArr.size) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h3 id="Set-的增删查"><a href="#Set-的增删查" class="headerlink" title="Set 的增删查"></a>Set 的增删查</h3><ul><li>追加 add</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> setArr = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">setArr.add(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">console</span>.log(setArr) <span class="comment">// Set(4) &#123;1, 2, 3, 4, 5&#125;</span></span><br></pre></td></tr></table></figure><ul><li>删除 delete</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> setArr = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">setArr.add(<span class="number">5</span>)</span><br><span class="line">setArr.delete(<span class="number">5</span>)</span><br><span class="line"><span class="built_in">console</span>.log(setArr) <span class="comment">// Set(4) &#123;1, 2, 3, 4&#125;</span></span><br></pre></td></tr></table></figure><ul><li>查找 has</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> setArr = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(setArr) <span class="comment">// Set(4) &#123;1, 2, 3, 4&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(setArr.has(<span class="number">1</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>清空 clear</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> setArr = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">setArr.clear()</span><br><span class="line"><span class="built_in">console</span>.log(setArr) <span class="comment">// Set(0) &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>set 的 for…of 循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> setArr = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> setArr) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>set 的 forEach 循环</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> setArr = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line">setArr.forEach(<span class="function"><span class="params">val</span> =&gt;</span> <span class="built_in">console</span>.log(val))</span><br></pre></td></tr></table></figure><p>weakSet的声明</p><blockquote><p>这里需要注意的是，如果你直接在new 的时候就放入值，将报错.WeakSet里边的值也是不允许重复的<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> weakObj = <span class="keyword">new</span> <span class="built_in">WeakSet</span>()</span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">a</span>: <span class="string">'前'</span>, <span class="attr">b</span>: <span class="string">'后'</span> &#125;</span><br><span class="line">weakObj.add(obj)</span><br><span class="line"><span class="built_in">console</span>.log(weakObj)</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="Map数据结构"><a href="#Map数据结构" class="headerlink" title="Map数据结构"></a>Map数据结构</h2><blockquote><p>Map的灵活性要更好，你可以把它看成一种特殊的键值对，但你的key可以设置成数组，值也可以设置成字符串，让它不规律对应起来。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> json = &#123;</span><br><span class="line">  a:<span class="string">'前'</span>,</span><br><span class="line">  b:<span class="string">'后'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> map=<span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line"></span><br><span class="line">map.set(json,<span class="string">'全'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(map)</span><br><span class="line"><span class="built_in">console</span>.log(map.get(json))</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="map的增删查"><a href="#map的增删查" class="headerlink" title="map的增删查"></a>map的增删查</h3><ul><li><p>增加set</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.set(json,<span class="string">'全'</span>)</span><br></pre></td></tr></table></figure></li><li><p>取值get</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(map.get(json))</span><br></pre></td></tr></table></figure></li><li><p>删除delete</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">map.delete(json);</span><br><span class="line"><span class="built_in">console</span>.log(map)</span><br></pre></td></tr></table></figure></li><li><p>size属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(map.size)</span><br></pre></td></tr></table></figure></li><li><p>查找has</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(map.has(json))</span><br></pre></td></tr></table></figure><ul><li>清空 clear<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">map.clear()</span><br></pre></td></tr></table></figure></li></ul><p>总结：map在现在开发中已经经常使用，它的灵活性和高效性是我们喜欢的。开发中试着去使用map吧，你一定会喜欢上它的。</p><h2 id="用Proxy进行预处理"><a href="#用Proxy进行预处理" class="headerlink" title="用Proxy进行预处理"></a>用Proxy进行预处理</h2><blockquote><p>在运行函数前初始化一些数据，在改变对象值后做一些善后处理。这些都算钩子函数，Proxy的存在就可以让我们给函数加上这样的钩子函数，你也可以理解为在执行方法前预处理一些代码。你可以简单的理解为他是函数或者对象的生命周期。</p></blockquote><h3 id="声明Proxy"><a href="#声明Proxy" class="headerlink" title="声明Proxy"></a>声明Proxy</h3><blockquote><p>我们用new的方法对Proxy进行声明。可以看一下声明Proxy的基本形式。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;,&#123;&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><p>需要注意的是这里是两个花括号，第一个花括号就相当于我们方法的主体，后边的花括号就是Proxy代理处理区域，相当于我们写钩子函数的地方。</p><p>现在把上边的obj对象改成我们的Proxy形式。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pro = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;</span><br><span class="line">    add: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> val + <span class="number">10</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    name: <span class="string">'I am Jspang'</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">        get:<span class="function"><span class="keyword">function</span>(<span class="params">target,key,property</span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'come in Get'</span>);</span><br><span class="line">            <span class="keyword">return</span> target[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(pro.name);</span><br></pre></td></tr></table></figure></p><p>可以在控制台看到结果，先输出了come in Get。相当于在方法调用前的钩子函数。</p><h3 id="get属性"><a href="#get属性" class="headerlink" title="get属性"></a>get属性</h3><p>get属性是在你得到某对象属性值时预处理的方法，他接受三个参数</p><p>target：得到的目标值<br>key：目标的key值，相当于对象的属性<br>property：这个不太常用，用法还在研究中，还请大神指教。</p><h3 id="set属性"><a href="#set属性" class="headerlink" title="set属性"></a>set属性</h3><p>set属性是值你要改变Proxy属性值时，进行的预先处理。它接收四个参数。</p><p>target:目标值。<br>key：目标的Key值。<br>value：要改变的值。<br>receiver：改变前的原始值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pro=<span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;</span><br><span class="line">  add(val)&#123;</span><br><span class="line">    <span class="keyword">return</span> val+<span class="number">10</span></span><br><span class="line">  &#125;,</span><br><span class="line">  name:<span class="string">'hello world'</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">  get(target,key,property)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'come in Get'</span>)</span><br><span class="line">    <span class="keyword">return</span> target[key]</span><br><span class="line">  &#125;,</span><br><span class="line">  set(target,key,value,receiver)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`set <span class="subst">$&#123;key&#125;</span> = <span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">return</span> target[key]=value</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(pro.name)</span><br><span class="line">pro.name=<span class="string">'你好世界'</span></span><br><span class="line"><span class="built_in">console</span>.log(pro.name)</span><br></pre></td></tr></table></figure><p><img src="https://user-gold-cdn.xitu.io/2018/12/12/167a1c05fa893316?w=184&amp;h=99&amp;f=png&amp;s=3287" alt=""></p><h2 id="promise"><a href="#promise" class="headerlink" title="promise"></a>promise</h2><blockquote><p>ES6 中的 promise 的出现给我们很好的解决了回调地狱的问题，在使用 ES5 的时候，在多层嵌套回调时，写完的代码层次过多，很难进行维护和二次开发，ES6 认识到了这点问题，现在 promise 的使用，完美解决了这个问题。那我们如何理解 promise 这个单词在 ES5 中的作用那，你可以想象他是一种承诺，当它成功时执行一些代码，当它失败时执行一些代码。它更符合人类的行为思考习惯，而不在是晦涩难懂的冰冷语言。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">step1</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'开始洗菜'</span>)</span><br><span class="line">  <span class="keyword">if</span> (state == <span class="number">1</span>) &#123;</span><br><span class="line">    resolve(<span class="string">'洗菜-完成'</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(<span class="string">'洗菜-失败'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">step2</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'开始吃饭'</span>)</span><br><span class="line">  <span class="keyword">if</span> (state == <span class="number">2</span>) &#123;</span><br><span class="line">    resolve(<span class="string">'吃饭-完成'</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(<span class="string">'吃饭-失败'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">step3</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'开始洗碗'</span>)</span><br><span class="line">  <span class="keyword">if</span> (state == <span class="number">3</span>) &#123;</span><br><span class="line">    resolve(<span class="string">'洗碗-完成'</span>)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(<span class="string">'洗碗-失败'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> state = <span class="number">1</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(step1)</span><br><span class="line">  .then(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val)</span><br><span class="line">    state++</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(step2)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val)</span><br><span class="line">    state++</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(step3)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val)</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><blockquote><p>我们在 ES5 中经常使用方法或者对象去模拟类的使用，虽然可以实现功能，但是代码并不优雅，ES6 为我们提供了类的使用。需要注意的是我们在写类的时候和 ES5 中的对象和构造函数要区分开来，不要学混了。</p></blockquote><h3 id="类的声明"><a href="#类的声明" class="headerlink" title="类的声明"></a>类的声明</h3><blockquote><p>我们已经声明了一个类，并在类里声明了 name 方法，现在要实例化类，并使用类中的方法。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">  name(val) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val)</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> Tom = <span class="keyword">new</span> Student()</span><br><span class="line">Tom.name(<span class="string">'Tom)</span></span><br></pre></td></tr></table></figure><h3 id="类的多方法声明"><a href="#类的多方法声明" class="headerlink" title="类的多方法声明"></a>类的多方法声明</h3><blockquote><p>这里需要注意的是两个方法中间不要写逗号了，还有这里的 this 指类本身，还有要注意 return 的用法。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">  name(val) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val)</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line">  skill(val) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name(<span class="string">'Tom'</span> + <span class="string">' skill '</span> + val))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> Tom = <span class="keyword">new</span> Student()</span><br><span class="line">Tom.name(<span class="string">'Tom)</span></span><br><span class="line"><span class="string">Tom.skill('</span>web<span class="string">')</span></span><br></pre></td></tr></table></figure><h3 id="类的传参"><a href="#类的传参" class="headerlink" title="类的传参"></a>类的传参</h3><blockquote><p>在类的参数传递中我们用 constructor( )进行传参。传递参数后可以直接使用 this.xxx 进行调用.</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">  name(val) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val)</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line">  skill(val) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name(<span class="string">'Tom'</span> + <span class="string">' skill '</span> + val))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">constructor</span>(a, b) &#123;</span><br><span class="line">    <span class="keyword">this</span>.a = a</span><br><span class="line">    <span class="keyword">this</span>.b = b</span><br><span class="line">  &#125;</span><br><span class="line">  add() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="keyword">this</span>.b</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> Tom = <span class="keyword">new</span> Student(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">console</span>.log(Tom.add())</span><br></pre></td></tr></table></figure><p>我们用 constructor 来约定了传递参数，然后用作了一个 add 方法，把参数相加。这和以前我们的传递方法有些不一样，所以需要小伙伴们多注意下。</p><h3 id="class-的继承"><a href="#class-的继承" class="headerlink" title="class 的继承"></a>class 的继承</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">  name(val) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val)</span><br><span class="line">    <span class="keyword">return</span> val</span><br><span class="line">  &#125;</span><br><span class="line">  skill(val) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name(<span class="string">'Tom'</span> + <span class="string">' skill '</span> + val))</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">constructor</span>(a, b) &#123;</span><br><span class="line">    <span class="keyword">this</span>.a = a</span><br><span class="line">    <span class="keyword">this</span>.b = b</span><br><span class="line">  &#125;</span><br><span class="line">  add() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="keyword">this</span>.b</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Student</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Jack = <span class="keyword">new</span> Man(<span class="number">12</span>, <span class="number">23</span>)</span><br><span class="line">Jack.name(<span class="string">'Jack'</span>)</span><br><span class="line">Jack.skill(<span class="string">'java'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(Jack.add())</span><br></pre></td></tr></table></figure><h2 id="模块化"><a href="#模块化" class="headerlink" title="模块化"></a>模块化</h2><blockquote><p>在 ES5 中我们要进行模块华操作需要引入第三方类库，随着前后端分离，前端的业务日渐复杂，ES6 为我们增加了模块话操作。模块化操作主要包括两个方面。</p></blockquote><ul><li>export :负责进行模块化，也是模块的输出。</li><li>import : 负责把模块引，也是模块的引入操作。</li></ul><h3 id="export-的用法："><a href="#export-的用法：" class="headerlink" title="export 的用法："></a>export 的用法：</h3><blockquote><p>export 可以让我们把变量，函数，对象进行模块话，提供外部调用接口，让外部进行引用。先来看个最简单的例子，把一个变量模块化。我们新建一个 temp.js 文件，然后在文件中输出一个模块变量。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> a = <span class="string">'tom'</span></span><br></pre></td></tr></table></figure><p>然后可以在 index.js 中以 import 的形式引入。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; a &#125; <span class="keyword">from</span> <span class="string">'./temp.js'</span></span><br><span class="line"><span class="built_in">console</span>.log(a)</span><br></pre></td></tr></table></figure><p>这就是一个最简单的模块的输出和引入。</p><h3 id="多变量的输出"><a href="#多变量的输出" class="headerlink" title="多变量的输出"></a>多变量的输出</h3><p>这里声明了 3 个变量，需要把这 3 个变量都进行模块化输出，这时候我们给他们包装成对象就可以了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'tom'</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">'jack'</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="string">'web'</span></span><br></pre></td></tr></table></figure><p>export {a,b,c}</p><h3 id="函数的模块化输出"><a href="#函数的模块化输出" class="headerlink" title="函数的模块化输出"></a>函数的模块化输出</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>as 的用法 有些时候我们并不想暴露模块里边的变量名称，而给模块起一个更语义话的名称，这时候我们就可以使用 as 来操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'tom'</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="string">'jack'</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="string">'web'</span></span><br><span class="line"><span class="keyword">export</span> &#123; x <span class="keyword">as</span> a, y <span class="keyword">as</span> b, z <span class="keyword">as</span> c &#125;</span><br></pre></td></tr></table></figure><p>export default 的使用 加上 default 相当是一个默认的入口。在一个文件里 export default 只能有一个。我们来对比一下 export 和 export default 的区别</p><p>1.export</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> a = <span class="string">'tom'</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对应的导入方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;a,add&#125; form <span class="string">'./temp'</span> <span class="comment">//也可以分开写</span></span><br></pre></td></tr></table></figure><p>2.export defalut</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">var</span> a=<span class="string">'tom'</span></span><br></pre></td></tr></table></figure><p>对应的引入方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> str <span class="keyword">from</span> <span class="string">'./temp'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;本文来自于jspang大佬，跟着大佬的博客手撸了一遍。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;let-和-const&quot;&gt;&lt;a href=&quot;#let-和-const&quot; class=&quot;headerlink&quot; title=&quot;let 和 co
      
    
    </summary>
    
    
      <category term="ES6" scheme="http://iExit.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6</title>
    <link href="http://iExit.github.io/2018/12/24/ES6/"/>
    <id>http://iExit.github.io/2018/12/24/ES6/</id>
    <published>2018-12-24T08:17:13.000Z</published>
    <updated>2018-12-25T08:45:05.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-变量声明let和const"><a href="#1-变量声明let和const" class="headerlink" title="1.变量声明let和const"></a>1.变量声明let和const</h2><h3 id="预解析机制-var有变量提升的机制"><a href="#预解析机制-var有变量提升的机制" class="headerlink" title="预解析机制 : var有变量提升的机制"></a>预解析机制 : var有变量提升的机制</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">1</span></span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line">fn()  <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//以上代码等同于：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a</span><br><span class="line">    a=<span class="number">1</span></span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line">fn()  <span class="comment">//1</span></span><br></pre></td></tr></table></figure><p>把声明赋值和打印的语句顺序交换<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="keyword">var</span> a=<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">fn()  <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//以上代码等同于：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    a=<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">fn()  <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></p><p>ES5的解析：从上到下解析，遇到var关键字，就把该声明提前到函数的最顶部，如果不在函数内就提升到全局作用域的最顶部，赋值留在原位，因为先声明了变量a，然后打印，最后再赋值，所以结果就是undefined。<br>但是使用let和const就可以解决变量提升的问题，let代表变量，const代表常量。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> a=<span class="number">1</span></span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">&#125;</span><br><span class="line">fn()  <span class="comment">//1</span></span><br></pre></td></tr></table></figure></p><p>把声明赋值和打印的语句顺序交换<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a)</span><br><span class="line">    <span class="keyword">let</span> a=<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">fn()  <span class="comment">//Error: a is not defined</span></span><br></pre></td></tr></table></figure></p><p>let不存在变量提升的机制，不会被声明到最顶部，所以未声明就打印，会报错：变量未定义。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span></span><br><span class="line"><span class="keyword">const</span> PI=<span class="number">3.14</span></span><br><span class="line">PI=<span class="number">3.1415926</span>  <span class="comment">//Error: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure></p><p>const的声明必须赋值，赋值之后不可修改。那要怎么修改const的值呢？<br>实际上是const的指向不可修改，但是可以通过更改地址中的内容来修改了const的值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stu=&#123; <span class="attr">name</span>:　<span class="string">'小明'</span> &#125;</span><br><span class="line"><span class="comment">//正确,改变地址中的内容</span></span><br><span class="line">stu.name=<span class="string">'小红'</span></span><br><span class="line"><span class="comment">//报错,改变了const的指向</span></span><br><span class="line">stu=&#123; <span class="attr">name</span>:　<span class="string">'小红'</span> &#125;</span><br><span class="line">TDZ(暂时性死区)</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="comment">// TDZ开始</span></span><br><span class="line">    tmp = <span class="string">'abc'</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(tmp); <span class="comment">// Error: tmp is not defined</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> tmp; <span class="comment">// TDZ结束</span></span><br><span class="line">    <span class="built_in">console</span>.log(tmp); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">    tmp = <span class="number">123</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(tmp); <span class="comment">// 123</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>let 或者 const，会将声明放入TDZ(暂时性死区)，只有执行到变量声明语句时，变量才会从TDZ中取出来使用。总之，暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，只有等到声明变量的那一行代码出现，才可以获取和使用该变量。</p><h3 id="块级作用域"><a href="#块级作用域" class="headerlink" title="块级作用域"></a>块级作用域</h3><blockquote><p>ES6在ES5 全局作用域和函数作用域的基础上开拓了块级作用域，使得变量的作用域更加清晰。</p></blockquote><p>内层变量覆盖外层变量<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(tmp);</span><br><span class="line">  <span class="keyword">var</span> tmp = <span class="string">'hello world'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></p><p>函数f执行后，输出结果为undefined，原因在于变量提升，导致内层的tmp变量覆盖了外层的tmp变量。</p><p>用来计数的循环变量泄露为全局变量<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'hello'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; s.length; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(s[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure></p><p>变量i只用来控制循环，但是循环结束后，它并没有消失，泄露成了全局变量。</p><p>ES6新增了块级作用域，即一个{}就是一个块级作用域。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="keyword">let</span> a=<span class="number">1</span> &#125;</span><br><span class="line"><span class="built_in">console</span>.log(a)  <span class="comment">//报错</span></span><br></pre></td></tr></table></figure></p><p>不同块级作用域可以定义重名的变量<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a=<span class="string">'hello world'</span></span><br><span class="line">  &#123; <span class="keyword">let</span> a=<span class="string">'hello world'</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>立即执行函数就可以用块级作用域来替代<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//  IIFE写法</span><br><span class="line">(function()&#123;</span><br><span class="line">    var a=...</span><br><span class="line">    ...</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">//  块级作用域写法</span><br><span class="line">&#123;</span><br><span class="line">    var a=...</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="2-变量的解构赋值"><a href="#2-变量的解构赋值" class="headerlink" title="2.变量的解构赋值"></a>2.变量的解构赋值</h2><h3 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h3><blockquote><p>解构赋值语法是一个Javascript表达式，这使得可以将数据从数组或对象提取到不同的变量中。</p></blockquote><p>以前为变量赋值，只能直接指定值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span></span><br></pre></td></tr></table></figure></p><p>ES6就可以写成这样<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure></p><p>本质是上述匹配属于一种模式匹配, 也就是只要等号两边的模式相同，左边的变量就会被赋予对应的值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo, [[bar], baz]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</span><br><span class="line">foo <span class="comment">// 1</span></span><br><span class="line">bar <span class="comment">// 2</span></span><br><span class="line">baz <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [ , , third] = [<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>];</span><br><span class="line">third <span class="comment">// "baz"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [head, ...rest] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">head <span class="comment">// 1</span></span><br><span class="line">rest <span class="comment">// [2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [bar, foo] = [<span class="number">1</span>];</span><br><span class="line">bar <span class="comment">//1</span></span><br><span class="line">foo <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></p><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><blockquote><p>解构赋值允许指定默认值<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [ a = <span class="number">1</span> ]= [ ]</span><br><span class="line">a <span class="comment">//1</span></span><br></pre></td></tr></table></figure></p></blockquote><p>ES6 内部使用严格相等运算符（===），判断一个位置是否有值。所以，只有当一个数组成员严格等于undefined，默认值才会生效。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>] = [<span class="literal">undefined</span>];</span><br><span class="line">x <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>] = [<span class="literal">null</span>];</span><br><span class="line">x <span class="comment">// null</span></span><br></pre></td></tr></table></figure><p>null不严格等于undefined，默认值不生效。<br>如果默认值是一个表达式，表示则是惰性求值的，只有在用到的时候才会求值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [a = fn()]=[]</span><br><span class="line"><span class="built_in">console</span>.log(a)  <span class="comment">//-1</span></span><br><span class="line"><span class="keyword">let</span> [b = fn()]=[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">console</span>.log(b)  <span class="comment">//1</span></span><br></pre></td></tr></table></figure></p><p>默认值可以引用其他变量，但该变量必须已经声明。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>, y = x] = []     <span class="comment">// x=1; y=1</span></span><br><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>, y = x] = [<span class="number">2</span>]   <span class="comment">// x=2; y=2</span></span><br><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>, y = x] = [<span class="number">1</span>, <span class="number">2</span>] <span class="comment">// x=1; y=2</span></span><br><span class="line"><span class="keyword">let</span> [x = y, y = <span class="number">1</span>] = []   <span class="comment">// Error: y is not defined</span></span><br></pre></td></tr></table></figure></p><p>x用y做默认值，但是y还没有声明，所以报错。</p><h3 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h3><blockquote><p>解构不仅可以用于数组，还可以用于对象。<br>对象的解构赋值与数组不同的是：数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123;foo,bar&#125; = &#123;<span class="attr">foo</span>: <span class="string">'aaa'</span>, <span class="attr">bar</span>: <span class="string">'bbb'</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(foo)  <span class="comment">//aaa</span></span><br><span class="line"><span class="built_in">console</span>.log(bar)  <span class="comment">//bbb</span></span><br><span class="line"><span class="comment">//以上代码等同于：</span></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">foo</span>: foo, <span class="attr">bar</span>: bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> &#125;</span><br><span class="line"><span class="keyword">var</span> &#123;baz&#125; = &#123;<span class="attr">foo</span>: <span class="string">'aaa'</span>, <span class="attr">bar</span>: <span class="string">'bbb'</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(baz)  <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></p></blockquote><p>以上未找到baz，解构赋值失败。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; <span class="attr">foo</span>: baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">"aaa"</span>, <span class="attr">bar</span>: <span class="string">"bbb"</span> &#125;</span><br><span class="line">baz <span class="comment">// "aaa"</span></span><br><span class="line">foo <span class="comment">// Error: foo is not defined</span></span><br></pre></td></tr></table></figure></p><p>foo是匹配的模式，baz才是变量。真正被赋值的是变量baz，而不是模式foo。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  p: [</span><br><span class="line">    <span class="string">'hello'</span>,</span><br><span class="line">    &#123; <span class="attr">y</span>: <span class="string">'world'</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">p</span>: [x, &#123; y &#125;] &#125; = obj</span><br><span class="line"> <span class="built_in">console</span>.log(x,y)  <span class="comment">//hello word</span></span><br></pre></td></tr></table></figure></p><h3 id="字符串的解构赋值"><a href="#字符串的解构赋值" class="headerlink" title="字符串的解构赋值"></a>字符串的解构赋值</h3><blockquote><p>字符串的解构赋值，符串会转化成一个类数组的对象。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a,b,c,d,e] = <span class="string">'hello'</span>     </span><br><span class="line"><span class="built_in">console</span>.log(a,b,c,d,e)  <span class="comment">//h e l l o</span></span><br></pre></td></tr></table></figure></p></blockquote><p>类数组对象有length属性，所以len是5。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">length</span> : len&#125; = <span class="string">'hello'</span>;</span><br><span class="line">len  <span class="comment">//5</span></span><br></pre></td></tr></table></figure></p><h3 id="函数参数的解构赋值"><a href="#函数参数的解构赋值" class="headerlink" title="函数参数的解构赋值"></a>函数参数的解构赋值</h3><blockquote><p>函数的参数也可以使用解构赋值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function add([x, y])&#123;</span><br><span class="line">  return x + y;</span><br><span class="line">&#125;</span><br><span class="line">add([1, 2]); // 3</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="3-字符串的扩展"><a href="#3-字符串的扩展" class="headerlink" title="3.字符串的扩展"></a>3.字符串的扩展</h2><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><p>拼接字符串一直是令人头痛的地方，一旦变量多起来，字符串的拼接就会变得尤为繁琐，而且可读性极低，模板字符串简直就是开发者的福音。用<code>${}</code>嵌入字符串中拼接，有几个变量就用几个<code>${}</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">var</span> name=<span class="string">'world'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello'</span>+name)</span><br><span class="line"></span><br><span class="line"><span class="comment">//es6</span></span><br><span class="line"><span class="keyword">var</span> name=<span class="string">'world'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`hello<span class="subst">$&#123;name&#125;</span>`</span>)</span><br></pre></td></tr></table></figure></p><p>在ES5中通过反斜杠()来做多行字符串的拼接，ES6反引号(<code></code>)可以直接搞定。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">var</span> msg=<span class="string">'hello \</span></span><br><span class="line"><span class="string">world!'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">const</span> template=<span class="string">`</span></span><br><span class="line"><span class="string">  &lt;div&gt;</span></span><br><span class="line"><span class="string">    &lt;span&gt;hello world!&lt;/span&gt;</span></span><br><span class="line"><span class="string">  &lt;/div&gt;</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure></p><h3 id="对运算的支持"><a href="#对运算的支持" class="headerlink" title="对运算的支持"></a>对运算的支持</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a=<span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b=<span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> result=<span class="string">`<span class="subst">$&#123;a+b&#125;</span>`</span></span><br><span class="line"><span class="built_in">console</span>.log(result)  <span class="comment">//3</span></span><br></pre></td></tr></table></figure><h3 id="字符串是否存在"><a href="#字符串是否存在" class="headerlink" title="字符串是否存在"></a>字符串是否存在</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">'Github'</span></span><br><span class="line"><span class="keyword">let</span> msg = <span class="string">'hello world,my name is Github'</span></span><br><span class="line"><span class="built_in">console</span>.log(msg.indexOf(name))  <span class="comment">//返回索引值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">'Github'</span></span><br><span class="line"><span class="keyword">let</span> msg = <span class="string">'hello world,my name is Github'</span></span><br><span class="line"><span class="built_in">console</span>.log(msg.includes(name))  <span class="comment">//返回布尔值,更直观</span></span><br></pre></td></tr></table></figure><h3 id="复制字符串"><a href="#复制字符串" class="headerlink" title="复制字符串"></a>复制字符串</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'hello world|'</span>.repeat(<span class="number">3</span>))  <span class="comment">// hello world|hello world|hello world|</span></span><br></pre></td></tr></table></figure><h2 id="4-箭头函数"><a href="#4-箭头函数" class="headerlink" title="4.箭头函数"></a>4.箭头函数</h2><blockquote><p>ES6提供了箭头函数，给函数的创建提供了一种简便方法。<br><br>三大特点:</p><ul><li>省略function关键字</li><li>省略return关键字</li><li>继承当前上下文的this关键字<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es5</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].forEach((<span class="function"><span class="keyword">function</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item + <span class="number">1</span></span><br><span class="line">&#125;).bind(<span class="keyword">this</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].forEach(<span class="function"><span class="params">item</span>=&gt;</span>item+=<span class="number">1</span>)</span><br><span class="line">当参数只有一个时,可以省略(),当函数表达式只有一个时,可以省略&#123;&#125;和<span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  一个参数,一个表达式</span></span><br><span class="line"><span class="keyword">let</span> person = <span class="function"><span class="params">name</span> =&gt;</span> <span class="string">'hello '</span> + name</span><br><span class="line"><span class="built_in">console</span>.log(person(<span class="string">'world'</span>))  <span class="comment">//hello world</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个参数,多个表达式</span></span><br><span class="line"><span class="keyword">let</span> person = <span class="function">(<span class="params">name,age</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> msg = <span class="string">`hello <span class="subst">$&#123;name&#125;</span>,age is <span class="subst">$&#123;age&#125;</span>`</span></span><br><span class="line">  <span class="keyword">return</span> msg </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(person(<span class="string">'world'</span>,<span class="number">18</span>))  <span class="comment">//hello world,age is18</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><p>在使用别人的轮子时,因为不熟练经常会报错,那么这些框架是怎么抛出错误的呢?<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> add = <span class="function">(<span class="params">a,b=<span class="number">1</span></span>) =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(a&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'The variable must be greater than 0'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">0</span>));  <span class="comment">// Uncaught Error: The variable must be greater than 0</span></span><br></pre></td></tr></table></figure></p><h2 id="5-对象扩展功能"><a href="#5-对象扩展功能" class="headerlink" title="5.对象扩展功能"></a>5.对象扩展功能</h2><p>在对象的键值对重名时,可以这样处理<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name:name,</span><br><span class="line">    age:age</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">name,age</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    name,</span><br><span class="line">    age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ES6改进了为对象字面量方法赋值的语法,可以省略:和function关键字<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// es5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  name,</span><br><span class="line">  sayHi:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hi'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  name,</span><br><span class="line">  sayHi()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Hi'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>合并对象<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1=&#123;<span class="attr">name</span>:<span class="string">'Github'</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj2=&#123;<span class="attr">sex</span>:<span class="string">'男'</span>&#125;</span><br><span class="line"><span class="keyword">let</span> obj3=&#123;<span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="built_in">Object</span>.assign(&#123;&#125;,obj1,obj2,obj3)</span><br><span class="line"><span class="built_in">console</span>.log(obj)  <span class="comment">// &#123;name:"Github",sex:"男",age:18&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="6-扩展运算符-…"><a href="#6-扩展运算符-…" class="headerlink" title="6.扩展运算符(…)"></a>6.扩展运算符(…)</h2><h3 id="组装数组或者对象"><a href="#组装数组或者对象" class="headerlink" title="组装数组或者对象"></a>组装数组或者对象</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr1=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">const</span> arr2=[...arr1,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="built_in">console</span>.log(arr2)  <span class="comment">//[1,2,3,4,5,6]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj1=&#123;</span><br><span class="line">    a:<span class="number">1</span>,</span><br><span class="line">    b:<span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj2=&#123;...obj1,<span class="attr">c</span>:<span class="number">3</span>,<span class="attr">d</span>:<span class="number">4</span>&#125;</span><br><span class="line"><span class="built_in">console</span>.log(obj2); <span class="comment">//&#123;a:1,b:2,c:3,d:4&#125;</span></span><br></pre></td></tr></table></figure><h2 id="7-promise"><a href="#7-promise" class="headerlink" title="7.promise"></a>7.promise</h2><blockquote><p>在promise之前，回调地狱，可读性差、耦合度高、扩展性低 。promise大大提高了代码的可读性，用同步编程的方式来编写异步代码，极大的降低了代码耦合性而提高了程序的可扩展性。</p></blockquote><p>promise执行多步操作非常好用，现在模仿一个多步操作的过程。<br>把大象装进冰箱需要几步？答：三步，打开冰箱门，把大象塞进去，关上冰箱门。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">step1</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'1.开始-打开冰箱门'</span>);</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        resolve(<span class="string">'打开冰箱门--完成'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="string">'打开冰箱门--出错'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">step2</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'2.开始-把大象塞进去'</span>);</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        resolve(<span class="string">'把大象塞进去--完成'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="string">'把大象塞进去--出错'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">step3</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'3.开始-关上冰箱门'</span>);</span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        resolve(<span class="string">'关上冰箱门--完成'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="string">'关上冰箱门--出错'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(step1).then(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(step2);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(step3);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val);</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">1.开始-打开冰箱门</span></span><br><span class="line"><span class="comment">打开冰箱门--完成</span></span><br><span class="line"><span class="comment">2.开始-把大象塞进去</span></span><br><span class="line"><span class="comment">把大象塞进去--完成</span></span><br><span class="line"><span class="comment">3.开始-关上冰箱门</span></span><br><span class="line"><span class="comment">关上冰箱门--完成</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><h2 id="8-class类"><a href="#8-class类" class="headerlink" title="8.class类"></a>8.class类</h2><h3 id="class声明和使用"><a href="#class声明和使用" class="headerlink" title="class声明和使用"></a>class声明和使用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类的声明</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coder</span></span>&#123;</span><br><span class="line">    getName(name)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 类的使用</span></span><br><span class="line"><span class="keyword">let</span> Github=<span class="keyword">new</span> Coder</span><br><span class="line">Github.getName(<span class="string">'Github'</span>)  <span class="comment">// Github</span></span><br><span class="line">声明一个JsCoder的新类并继承Coder类</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Coder</span></span>&#123;</span><br><span class="line">    getName(name)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsCoder</span> <span class="keyword">extends</span> <span class="title">Coder</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> js=<span class="keyword">new</span> JsCoder</span><br><span class="line">js.getName(<span class="string">'js'</span>)</span><br></pre></td></tr></table></figure><h2 id="9-模块化"><a href="#9-模块化" class="headerlink" title="9.模块化"></a>9.模块化</h2><blockquote><p>前后端分离，前端业务逻辑也在日益复杂，前端也在借鉴后端的思想，ES6为我们增加了模块化操作来方便我们引用第三方库，尤其是在开发vue项目时，需要依赖大量第三方包，需要我们使用到模块化的思想来开发项目。</p></blockquote><ul><li>import : 引入模块</li><li>export : 输出模块<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js 导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> name=<span class="string">'hello world'</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js 导入</span></span><br><span class="line"><span class="keyword">import</span> &#123; name,add &#125; <span class="keyword">from</span> <span class="string">"./a.js"</span>  <span class="comment">//也可以分开导入</span></span><br><span class="line"><span class="built_in">console</span>.log(name)  <span class="comment">//hello world</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>,<span class="number">2</span>))  <span class="comment">//3</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-变量声明let和const&quot;&gt;&lt;a href=&quot;#1-变量声明let和const&quot; class=&quot;headerlink&quot; title=&quot;1.变量声明let和const&quot;&gt;&lt;/a&gt;1.变量声明let和const&lt;/h2&gt;&lt;h3 id=&quot;预解析机制-var有变量提
      
    
    </summary>
    
    
      <category term="ES6" scheme="http://iExit.github.io/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>vscode之必备插件推荐</title>
    <link href="http://iExit.github.io/2018/12/23/vscode%E4%B9%8B%E5%BF%85%E5%A4%87%E6%8F%92%E4%BB%B6%E6%8E%A8%E8%8D%90/"/>
    <id>http://iExit.github.io/2018/12/23/vscode之必备插件推荐/</id>
    <published>2018-12-23T08:07:03.000Z</published>
    <updated>2018-12-26T02:43:26.585Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>工欲善其事，必先利其器</p></blockquote><h2 id="Auto-Close-Tag"><a href="#Auto-Close-Tag" class="headerlink" title="Auto Close Tag"></a>Auto Close Tag</h2><blockquote><p>自动闭合标签</p></blockquote><h2 id="Auto-Rename-Tag"><a href="#Auto-Rename-Tag" class="headerlink" title="Auto Rename Tag"></a>Auto Rename Tag</h2><blockquote><p>自动完成另一侧标签的同步修改</p></blockquote><h2 id="Path-Intellisense"><a href="#Path-Intellisense" class="headerlink" title="Path Intellisense"></a>Path Intellisense</h2><blockquote><p>自动提示文件路径，支持快速引入文件</p></blockquote><h2 id="Open-HTML-in-Default-Browser"><a href="#Open-HTML-in-Default-Browser" class="headerlink" title="Open HTML in Default Browser"></a>Open HTML in Default Browser</h2><blockquote><p>右键:在浏览器中打开</p></blockquote><h2 id="Live-Server"><a href="#Live-Server" class="headerlink" title="Live Server"></a>Live Server</h2><blockquote><p>vscode不是IDE,可以用Liver Server开启本地服务实现视图热更新</p></blockquote><h2 id="Css-Peek"><a href="#Css-Peek" class="headerlink" title="Css Peek"></a>Css Peek</h2><blockquote><p>右键单击选择器时，展示当前样式，可直接跳转到定义css的代码位置</p></blockquote><h2 id="Color-Picker"><a href="#Color-Picker" class="headerlink" title="Color Picker"></a>Color Picker</h2><blockquote><p>拾色器<br>直接在编辑器中选择合适的颜色</p></blockquote><h2 id="cssrem"><a href="#cssrem" class="headerlink" title="cssrem"></a>cssrem</h2><blockquote><p>css值转rem</p></blockquote><h2 id="vscode-icons"><a href="#vscode-icons" class="headerlink" title="vscode-icons"></a>vscode-icons</h2><h2 id="Material-Icon-Theme"><a href="#Material-Icon-Theme" class="headerlink" title="Material Icon Theme"></a>Material Icon Theme</h2><blockquote><p>图标</p></blockquote><h2 id="One-Dark-Pro"><a href="#One-Dark-Pro" class="headerlink" title="One Dark Pro"></a>One Dark Pro</h2><h2 id="One-Monokai-Theme"><a href="#One-Monokai-Theme" class="headerlink" title="One Monokai Theme"></a>One Monokai Theme</h2><blockquote><p>主题</p></blockquote><h2 id="Chinese-Simplified-Language-Pack-for-Visual-Studio-Code"><a href="#Chinese-Simplified-Language-Pack-for-Visual-Studio-Code" class="headerlink" title="Chinese (Simplified) Language Pack for Visual Studio Code"></a>Chinese (Simplified) Language Pack for Visual Studio Code</h2><blockquote><p>安装后，在 locale.json 中添加 “locale”: “zh-cn”，即可载入中文（简体）语言包。要修改 locale.json，你可以同时按下 Ctrl+Shift+P 打开命令面板，之后输入 “config” 筛选可用命令列表，最后选择配置语言命令。</p></blockquote><h2 id="Vetur"><a href="#Vetur" class="headerlink" title="Vetur"></a>Vetur</h2><blockquote><p>vue语法高亮/格式化/代码片段/语法检查等</p></blockquote><h2 id="GitLens"><a href="#GitLens" class="headerlink" title="GitLens"></a>GitLens</h2><blockquote><p>git版本控制</p></blockquote><h2 id="Git-Histroy"><a href="#Git-Histroy" class="headerlink" title="Git Histroy"></a>Git Histroy</h2><blockquote><p>Git的详细信息和图表</p></blockquote><h2 id="Debugger-for-Chrome"><a href="#Debugger-for-Chrome" class="headerlink" title="Debugger for Chrome"></a>Debugger for Chrome</h2><blockquote><p>在编辑器中设置断点等调试，用于Chrome</p></blockquote><h2 id="Quokka-js"><a href="#Quokka-js" class="headerlink" title="Quokka.js"></a>Quokka.js</h2><blockquote><p>实时调试和展示结果</p></blockquote><h2 id="Faker"><a href="#Faker" class="headerlink" title="Faker"></a>Faker</h2><blockquote><p>Faker 可以随机生成姓名、地址、图像、电话号码<br>crtl+shift+p 输入Faker:Name即可随即插入姓名</p></blockquote><h2 id="TODO-Highlight"><a href="#TODO-Highlight" class="headerlink" title="TODO Highlight"></a>TODO Highlight</h2><blockquote><p>高亮TODO 和FIXME注释，以便追踪任何未完成的业务</p></blockquote><h2 id="小程序开发插件"><a href="#小程序开发插件" class="headerlink" title="小程序开发插件"></a>小程序开发插件</h2><blockquote><p>vscode weapp api<br><br>vscode wxml<br><br>vscode-wechat<br><br>Easy WXLESS</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;工欲善其事，必先利其器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Auto-Close-Tag&quot;&gt;&lt;a href=&quot;#Auto-Close-Tag&quot; class=&quot;headerlink&quot; title=&quot;Auto Close Tag&quot;&gt;&lt;/
      
    
    </summary>
    
    
      <category term="vscode" scheme="http://iExit.github.io/tags/vscode/"/>
    
  </entry>
  
</feed>
